Node JS Training [30 hrs]

10+ expamples
1 SSR Project in NodeJS
1 REST API Project in NodeJS

---

Softwares required
--
NodeJS V 14+
VS Code Editor
Chrome / FF / Edge / Safari Browser
Postman REST API Client / Advanced REST API Client
MongoDB Community Editor
MySQL Community Server

Day 1:

NodeJS History---

---

file1.java => (javac) => bytecode / classfile => (JRE) => Native Machine Language 

Front End --- JS

Browser Family -- 
2003, 04, 05  -- IE, Mozilla Firefox, Apple Safari, Opera

Browser core = HTML Renderer + CSS Parser + JS engine

Webkit Browser core (Open Sourced) => Safari
Mozilla Browser core (Open Sourced) => Firefox

Chromium Core (Open Sourced) => Chrome
    Made with Webkit core + Mozilla + google own codebase (V8 JS Engine) => Chrome

V8 JS Engine (Open Sourced) ---
    * js code into machine lang before execute

---

NodeJS
--
    * Uses V8 Engine

Front End --- JS (raw or vanila JS)
 
JS flavours ---

Back End -- Java, .Net, PHP, Perl, Python, Ruby, NodeJS (JS)

Database
--
    SQL, MongoDB (JS)

Mobile Apps
--
    Java, .Net, Python, Ionic and React Native (JS)

Desktop Apps
--
    Java, .Net, Electron JS (JS)


Day 2-
NodeJS = V8 + ( C and C++ code + JS code )
--

    JS IN COMPUTER
    JS as backend language

challenges for JS as backend language ---
 * JS needs to accept request and send responses
    client => (ajax) => Server
 * JS nneds to communicate over internet-                                                
 * JS should deal with files and file system
 * JS should deal with databases
 * Synchronous ---
    - JS is synchronous
    - Executes only one process at a time
    - V8 is also synchronous
ex:
    // sync js

    function add (a, b) {
        console.log('inside add')
        setTimeout (() => {
        return a+ b;
        },2000)       
    }

    console.log('before calling add')
    const output = add(10, 20);
    console.log('after calling add')
    console.log(output);

* Asynchronous
    - Executing more than one process simultaneously
    - Node.js is asynchronous

Node.js architecture ---
    Node JS standarard library (written in JS)
    Node JS bindings (written in C and C++)
        V8
        libuv(Async I/O, Events) (written in C and C++)
    Operating System

FIRST NODEJS PROGRAM
this === global 

executing 1st code through terminal use:
 node first.js

file1.js => (NodeJS) => Machine Language


HTTP request    

language.file   (server)
default.aspx    (IIS)=> MS
index.php       (Apache)=> OpenSourse
index.jsp       (Weblogic, Tomcat, KBoss, Websphere)

index.js        (Http in NodeJs)

day 5 
-- ES Lint
-- Sonar Qube



10 Projects

1 Project - SSR
1 Project - REST API


Nodejs ecosystem---

fs 
http 
events 


global dependecy--
* will be accessible system wide
npm i nodemon -g (or)
npm i nodemon --global



steps to install express js
mkdir ssr-express-app 
cd ssr-express-app 
npm init
